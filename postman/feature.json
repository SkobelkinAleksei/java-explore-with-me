{
	"info": {
		"_postman_id": "a748d56b-3799-48b2-8345-aba01198a0f9",
		"name": "Commet API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44330503",
		"_collection_link": "https://aleksei-1715307.postman.co/workspace/cf79b704-7aaf-4791-847c-1a413591ee56/collection/44330503-a748d56b-3799-48b2-8345-aba01198a0f9?action=share&source=collection_link&creator=44330503"
	},
	"item": [
		{
			"name": "Comment",
			"item": [
				{
					"name": "Создать комментарий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const now = new Date();",
									"const maxDifferenceMs = 5 * 60 * 1000;",
									"",
									"pm.test(\"Код ответа равен 201 (CREATED)\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"pm.test(\"Ответ содержит обязательные поля\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('userName', 'message', 'createdAt');",
									"});",
									"",
									"pm.test(\"Поле userName содержит строку\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.userName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Имя Автора не должно быть пустым\");",
									"});",
									"",
									"pm.test(\"Ответ содержит поле message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('message');",
									"    console.log(\"Поле message присутствует:\", responseData.message);",
									"});",
									"",
									"pm.test(\"Поле createdAt — валидная дата и находится в пределах допустимого диапазона\", function () {",
									"    const responseData = pm.response.json();",
									"    const createdAtStr = responseData.createdAt;",
									"    pm.expect(createdAtStr).to.exist;",
									"    pm.expect(createdAtStr).to.be.a('string');",
									"    const createdAtDate = new Date(createdAtStr);",
									"    pm.expect(createdAtDate.getTime()).to.not.be.NaN;",
									"    pm.expect(createdAtDate.getTime()).to.be.within(now.getTime() - maxDifferenceMs, now.getTime() + maxDifferenceMs);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const messages = [\r",
									"    \"Хочу побывать на этом событии!\",\r",
									"    \"Это мой первый раз!\",\r",
									"    \"Планирую присоединиться.\",\r",
									"    \"Интересно, что будет дальше?\",\r",
									"    \"Жду с нетерпением!\"\r",
									"];\r",
									"const randomMessage = messages[Math.floor(Math.random() * messages.length)];\r",
									"pm.environment.set(\"randomMessage\", randomMessage);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"{{randomMessage}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events",
								"{{eventId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создать 2-ой комментарий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const now = new Date();",
									"const maxDifferenceMs = 5 * 60 * 1000;",
									"",
									"pm.test(\"Код ответа равен 201 (CREATED)\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"pm.test(\"Ответ содержит обязательные поля\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('userName', 'message', 'createdAt');",
									"});",
									"",
									"pm.test(\"Поле userName содержит строку\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.userName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Имя Автора не должно быть пустым\");",
									"});",
									"",
									"pm.test(\"Ответ содержит поле message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('message');",
									"    console.log(\"Поле message присутствует:\", responseData.message);",
									"});",
									"",
									"pm.test(\"Поле createdAt — валидная дата и находится в пределах допустимого диапазона\", function () {",
									"    const responseData = pm.response.json();",
									"    const createdAtStr = responseData.createdAt;",
									"    pm.expect(createdAtStr).to.exist;",
									"    pm.expect(createdAtStr).to.be.a('string');",
									"    const createdAtDate = new Date(createdAtStr);",
									"    pm.expect(createdAtDate.getTime()).to.not.be.NaN;",
									"    pm.expect(createdAtDate.getTime()).to.be.within(now.getTime() - maxDifferenceMs, now.getTime() + maxDifferenceMs);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const messages = [\r",
									"    \"Хочу побывать на этом событии!\",\r",
									"    \"Это мой первый раз!\",\r",
									"    \"Планирую присоединиться.\",\r",
									"    \"Интересно, что будет дальше?\",\r",
									"    \"Жду с нетерпением!\"\r",
									"];\r",
									"const randomMessage = messages[Math.floor(Math.random() * messages.length)];\r",
									"pm.environment.set(\"randomMessage\", randomMessage);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"{{randomMessage}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создать 3-ий комментарий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const now = new Date();",
									"const maxDifferenceMs = 5 * 60 * 1000;",
									"",
									"pm.test(\"Код ответа равен 201 (CREATED)\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"pm.test(\"Ответ содержит обязательные поля\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('userName', 'message', 'createdAt');",
									"});",
									"",
									"pm.test(\"Поле userName содержит строку\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.userName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Имя Автора не должно быть пустым\");",
									"});",
									"",
									"pm.test(\"Ответ содержит поле message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('message');",
									"    console.log(\"Поле message присутствует:\", responseData.message);",
									"});",
									"",
									"pm.test(\"Поле createdAt — валидная дата и находится в пределах допустимого диапазона\", function () {",
									"    const responseData = pm.response.json();",
									"    const createdAtStr = responseData.createdAt;",
									"    pm.expect(createdAtStr).to.exist;",
									"    pm.expect(createdAtStr).to.be.a('string');",
									"    const createdAtDate = new Date(createdAtStr);",
									"    pm.expect(createdAtDate.getTime()).to.not.be.NaN;",
									"    pm.expect(createdAtDate.getTime()).to.be.within(now.getTime() - maxDifferenceMs, now.getTime() + maxDifferenceMs);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const messages = [\r",
									"    \"Хочу побывать на этом событии!\",\r",
									"    \"Это мой первый раз!\",\r",
									"    \"Планирую присоединиться.\",\r",
									"    \"Интересно, что будет дальше?\",\r",
									"    \"Жду с нетерпением!\"\r",
									"];\r",
									"const randomMessage = messages[Math.floor(Math.random() * messages.length)];\r",
									"pm.environment.set(\"randomMessage\", randomMessage);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"{{randomMessage}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев у собития",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"1. Статус ответа должен быть 200 OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.code, \"Причина ошибки\").to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"2. Ответ должен быть массивом комментариев\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(Array.isArray(response), \"Ответ должен быть массивом\").to.be.true;\r",
									"    \r",
									"    if (response.length > 0) {\r",
									"        const sampleComment = response[0];\r",
									"        \r",
									"        pm.test(\"3. Каждый комментарий должен содержать поля userName, message, createdAt\", function() {\r",
									"            pm.expect(sampleComment, \"Проверка структуры комментария\").to.have.all.keys(\r",
									"                'userName', 'message', 'createdAt'\r",
									"            );\r",
									"        });\r",
									"        \r",
									"        pm.test(\"4. Проверка типов данных в комментарии\", function() {\r",
									"            pm.expect(sampleComment.userName, \"userName должен быть строкой\").to.be.a('string');\r",
									"            pm.expect(sampleComment.message, \"message должен быть строкой\").to.be.a('string');\r",
									"            pm.expect(sampleComment.createdAt, \"createdAt должен быть строкой\").to.be.a('string');\r",
									"            \r",
									"            pm.expect(sampleComment.message.length, \"Длина message должна быть 5-255 символов\")\r",
									"              .to.be.at.least(5)\r",
									"              .and.at.most(255);\r",
									"        });\r",
									"        \r",
									"        pm.test(\"5. Проверка формата даты createdAt\", function() {\r",
									"            const date = new Date(sampleComment.createdAt);\r",
									"            pm.expect(date.toString(), \"Некорректный формат даты\").not.to.equal('Invalid Date');\r",
									"            \r",
									"            const now = new Date();\r",
									"            pm.expect(date.getTime(), \"Дата не может быть в будущем\").to.be.at.most(now.getTime());\r",
									"        });\r",
									"        \r",
									"        if (sampleComment.id) {\r",
									"            pm.test(\"6. Проверка уникальности ID комментариев\", function() {\r",
									"                const ids = response.map(comment => comment.id);\r",
									"                const uniqueIds = [...new Set(ids)];\r",
									"                pm.expect(ids.length, \"Найдены дубликаты ID комментариев\").to.equal(uniqueIds.length);\r",
									"            });\r",
									"        }\r",
									"    } else {\r",
									"        pm.test(\"3. Нет комментариев для отображения (допустимый сценарий)\", function() {\r",
									"            pm.expect(response.length, \"Массив комментариев пуст\").to.equal(0);\r",
									"        });\r",
									"    }\r",
									"});\r",
									"pm.test(\"7. Заголовки ответа содержат Content-Type application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type'), \"Некорректный Content-Type\").to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария по id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ является объектом\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"// Проверка наличия и типа userName\r",
									"pm.test(\"Параметр 'userName' присутствует и является строкой с ненулевой длиной\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('userName');\r",
									"    pm.expect(responseData.userName).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"// Проверка наличия и типа message\r",
									"pm.test(\"Параметр 'message' присутствует и является строкой с ненулевой длиной\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"// Проверка наличия и корректности createdAt\r",
									"pm.test(\"Параметр 'createdAt' присутствует и является валидной датой, не будущей\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('createdAt');\r",
									"    const createdAtDate = new Date(responseData.createdAt);\r",
									"    pm.expect(createdAtDate.getTime()).to.not.be.NaN;\r",
									"\r",
									"    const now = new Date();\r",
									"    pm.expect(createdAtDate.getTime()).to.be.at.most(now.getTime());\r",
									"});\r",
									"\r",
									"// Проверка наличия и типа commentId\r",
									"pm.test(\"Параметр 'commentId' присутствует и является числом\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('commentId');\r",
									"    pm.expect(responseData.commentId).to.be.a('number');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить комментарии по событию и пользователю",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Код ответа равен 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Тип содержимого ответа — application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Ответ — массив с хотя бы одним объектом комментария\", function () {",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function(comment) {",
									"        pm.expect(comment).to.be.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Каждый объект комментария содержит необходимые поля\", function () {",
									"    responseData.forEach(comment => {",
									"        pm.expect(comment).to.have.all.keys('userName', 'message', 'createdAt');",
									"    });",
									"});",
									"",
									"pm.test(\"Поле createdAt — валидная дата\", function () {",
									"    responseData.forEach(function(comment) {",
									"        pm.expect(comment.createdAt).to.exist;",
									"        const дата = new Date(comment.createdAt);",
									"        pm.expect(дата.getTime()).to.not.be.NaN;",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events",
								"{{eventId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновить комментарий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"pm.environment.set(\"oldMessage\", responseData.message);\r",
									"\r",
									"const newResponseData = pm.response.json();\r",
									"const oldMessage = pm.environment.get(\"oldMessage\");\r",
									"\r",
									"pm.test(\"Поле message было успешно изменено\", function() {\r",
									"    pm.expect(newResponseData.message).to.eql(oldMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Код ответа равен 201 (CREATED)\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ содержит обязательные поля\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('userName', 'message', 'createdAt');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"const messages = [\r",
									"    \"Хочу побывать на этом событии!\",\r",
									"    \"Это мой первый раз!\",\r",
									"    \"Планирую присоединиться.\",\r",
									"    \"Интересно, что будет дальше?\",\r",
									"    \"Жду с нетерпением!\"\r",
									"];\r",
									"const randomMessage = messages[Math.floor(Math.random() * messages.length)];\r",
									"pm.environment.set(\"randomMessage\", randomMessage);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"{{randomMessage}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events",
								"{{eventId}}",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить комментарий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарий успешно удалён\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "7"
								},
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить комментарий АДМИН",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Комментарий успешно удалён\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment Exception",
			"item": [
				{
					"name": "Получить комментарии по событию, которого нет",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ содержит сообщение о ненайденном событии\", function() {",
									"    pm.response.to.have.status(404);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Событие не было найдено.\");",
									"    pm.expect(jsonData.reason).to.eql(\"NOT_FOUND\");",
									"    pm.expect(jsonData.status).to.eql(\"404 NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "99999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить комментарии по чужому событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ содержит сообщение о ненайденном событии\", function() {",
									"    pm.response.to.have.status(404);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Пользователь не является автором поста.\");",
									"    pm.expect(jsonData.reason).to.eql(\"NOT_FOUND\");",
									"    pm.expect(jsonData.status).to.eql(\"404 NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создать комментарий size min",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ содержит сообщение о нарушении ограничения размера поля message\", function() {",
									"    pm.response.to.have.status(400);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Размер должен находиться в диапазоне от 5 до 255\");",
									"    pm.expect(jsonData.reason).to.eql(\"BAD_REQUEST\");",
									"    pm.expect(jsonData.status).to.eql(\"400 BAD_REQUEST\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Хочу\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events",
								"{{eventId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создать комментарий size max",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ содержит сообщение о нарушении ограничения размера поля message\", function() {",
									"    pm.response.to.have.status(400);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Размер должен находиться в диапазоне от 5 до 255\");",
									"    pm.expect(jsonData.reason).to.eql(\"BAD_REQUEST\");",
									"    pm.expect(jsonData.status).to.eql(\"400 BAD_REQUEST\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Это сообщение содержит больше чем 255 символов. Оно предназначено дляeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee проверки ограничения длины поля message в API.Это сообщение содержит больше чем 255 символов. Оно предназначено дляeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee проверки ограничения длины поля message в API.\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events",
								"{{eventId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновить комментарий которого нет",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ содержит сообщение о ненайденном комментарии при обновлении\", function() {",
									"    pm.response.to.have.status(404);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Комментарий не был найден.\");",
									"    pm.expect(jsonData.reason).to.eql(\"NOT_FOUND\");",
									"    pm.expect(jsonData.status).to.eql(\"404 NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Было супер!\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events",
								"{{eventId}}",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "9999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновить комментарий не являясь автором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ содержит сообщение о ненайденном комментарии при обновлении\", function() {",
									"    pm.response.to.have.status(404);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Пользователь не был найден.\");",
									"    pm.expect(jsonData.reason).to.eql(\"NOT_FOUND\");",
									"    pm.expect(jsonData.status).to.eql(\"404 NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Было супер!\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "4"
								},
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновить комментарий у несуществующего события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ содержит сообщение о ненайденном комментарии при обновлении\", function() {",
									"    pm.response.to.have.status(404);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Событие не было найдено.\");",
									"    pm.expect(jsonData.reason).to.eql(\"NOT_FOUND\");",
									"    pm.expect(jsonData.status).to.eql(\"404 NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"Было супер!\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "90"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить комментарий которого нет",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ содержит сообщение о ненайденном комментарии при обновлении\", function() {",
									"    pm.response.to.have.status(404);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Комментарий не был найден.\");",
									"    pm.expect(jsonData.reason).to.eql(\"NOT_FOUND\");",
									"    pm.expect(jsonData.status).to.eql(\"404 NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events",
								"{{eventId}}",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить комментарий не являясь автором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ содержит сообщение о ненайденном комментарии при обновлении\", function() {",
									"    pm.response.to.have.status(404);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Пользователь не является автором поста.\");",
									"    pm.expect(jsonData.reason).to.eql(\"NOT_FOUND\");",
									"    pm.expect(jsonData.status).to.eql(\"404 NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								},
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить комментарий у несуществующего события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ содержит сообщение о ненайденном комментарии при обновлении\", function() {",
									"    pm.response.to.have.status(404);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Событие не было найдено.\");",
									"    pm.expect(jsonData.reason).to.eql(\"NOT_FOUND\");",
									"    pm.expect(jsonData.status).to.eql(\"404 NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "9999999999"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"class CommentAPI {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    // Создать комментарий\r",
					"    async createComment(userId, eventId, message, verbose = null) {\r",
					"        return this.post(`/users/${userId}/events/${eventId}/comments`, { message }, \"Ошибка при создании комментария\", verbose);\r",
					"    }\r",
					"\r",
					"    // Получить комментарий по id\r",
					"    async getComment(commentId, verbose = null) {\r",
					"        return this.get(`/admin/events/comments/${commentId}`, null, \"Ошибка при получении комментария по id\", verbose);\r",
					"    }\r",
					"\r",
					"    // Получить комментарии по событию и пользователю\r",
					"    async getCommentsByUserEvent(userId, eventId, verbose = null) {\r",
					"        return this.get(`/users/${userId}/events/${eventId}/comments`, null, \"Ошибка при получении комментариев по событию и пользователю\", verbose);\r",
					"    }\r",
					"\r",
					"    // Обновить комментарий по id\r",
					"    async updateComment(userId, eventId, commentId, message, verbose = null) {\r",
					"        return this.patch(`/users/${userId}/events/${eventId}/comments/${commentId}`, { message }, \"Ошибка при обновлении комментария\", verbose);\r",
					"    }\r",
					"\r",
					"    // Удалить комментарий по id\r",
					"    async deleteComment(userId, eventId, commentId, verbose = null) {\r",
					"        return this.delete(`/users/${userId}/events/${eventId}/comments/${commentId}`, \"Ошибка при удалении комментария\", verbose);\r",
					"    }\r",
					"\r",
					"    // Внутренние методы для отправки запросов\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose = null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose = null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose = null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async delete(path, errorText = \"Ошибка при выполнении delete-запроса: \", verbose = null) {\r",
					"        return this.sendRequest(\"DELETE\", path, null, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async sendRequest(method, path, body = null, errorText = \"Ошибка при выполнении запроса: \", verbose = null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                headers: { \"Content-Type\": \"application/json\" },\r",
					"                body: body ? JSON.stringify(body) : undefined\r",
					"            };\r",
					"            if (verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if (error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let errMsg = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"Ошибка при выполнении запроса:\\n\", errMsg, \"\\nДанные запроса:\\n\", JSON.stringify(request));\r",
					"                        reject(new Error(errorText + errMsg));\r",
					"                        return;\r",
					"                    }\r",
					"                    if (verbose) {\r",
					"                        console.log(\"Результат: код - \", response.code, \", тело - \", response.json());\r",
					"                    }\r",
					"                    if (response.stream && response.stream.length === 0) {\r",
					"                        reject(new Error('Пустой ответ от сервера'));\r",
					"                    } else {\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"            } catch (err) {\r",
					"                if (verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "categoryId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "state",
			"value": "PUBLISHED",
			"type": "default"
		},
		{
			"key": "commentId",
			"value": "1",
			"type": "default"
		}
	]
}